// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id, email, firstname, lastname, phone, profile_image, birth_date, role
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id
`

type CreateUserParams struct {
	ID           pgtype.UUID `json:"id"`
	Email        string      `json:"email"`
	Firstname    string      `json:"firstname"`
	Lastname     string      `json:"lastname"`
	Phone        pgtype.Text `json:"phone"`
	ProfileImage pgtype.Text `json:"profile_image"`
	BirthDate    pgtype.Date `json:"birth_date"`
	Role         string      `json:"role"`
}

// Insert a new user
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Firstname,
		arg.Lastname,
		arg.Phone,
		arg.ProfileImage,
		arg.BirthDate,
		arg.Role,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteUser = `-- name: DeleteUser :one
UPDATE users
SET deleted_at = NOW()
WHERE id = $1
RETURNING $1
`

// Soft delete a user
func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) (interface{}, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, deleted_at, email, firstname, lastname, phone, profile_image, birth_date, role
FROM users
WHERE email = $1
  AND deleted_at IS NULL
`

// Get a user by email
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.Firstname,
		&i.Lastname,
		&i.Phone,
		&i.ProfileImage,
		&i.BirthDate,
		&i.Role,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, created_at, updated_at, deleted_at, email, firstname, lastname, phone, profile_image, birth_date, role
FROM users
WHERE id = $1
  AND deleted_at IS NULL
`

// Get a single user by ID
func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.Firstname,
		&i.Lastname,
		&i.Phone,
		&i.ProfileImage,
		&i.BirthDate,
		&i.Role,
	)
	return i, err
}

const hardDeleteUser = `-- name: HardDeleteUser :one
DELETE FROM users
WHERE id = $1
RETURNING $1
`

// Hard delete a user (for admin use)
func (q *Queries) HardDeleteUser(ctx context.Context, id pgtype.UUID) (interface{}, error) {
	row := q.db.QueryRow(ctx, hardDeleteUser, id)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, created_at, updated_at, deleted_at, email, firstname, lastname, phone, profile_image, birth_date, role
FROM users
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

// List all users
func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Email,
			&i.Firstname,
			&i.Lastname,
			&i.Phone,
			&i.ProfileImage,
			&i.BirthDate,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    email = $2,
    firstname = $3,
    lastname = $4,
    phone = $5,
    profile_image = $6,
    birth_date = $7,
    role = $8,
    updated_at = NOW()
WHERE id = $1
  AND deleted_at IS NULL
RETURNING $1
`

type UpdateUserParams struct {
	ID           pgtype.UUID `json:"id"`
	Email        string      `json:"email"`
	Firstname    string      `json:"firstname"`
	Lastname     string      `json:"lastname"`
	Phone        pgtype.Text `json:"phone"`
	ProfileImage pgtype.Text `json:"profile_image"`
	BirthDate    pgtype.Date `json:"birth_date"`
	Role         string      `json:"role"`
}

// Update an existing user
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (interface{}, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Firstname,
		arg.Lastname,
		arg.Phone,
		arg.ProfileImage,
		arg.BirthDate,
		arg.Role,
	)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}
