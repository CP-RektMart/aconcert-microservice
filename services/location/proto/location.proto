syntax = "proto3";

package location;

option go_package = "location;location";

// ------------------ Messages ------------------ //
message Location {
    string id = 1;            
    string venue_name = 2;
    string city = 3;
    string state_province = 4;
    string country = 5;
    double latitude = 6;
    double longitude = 7;
    repeated Zone zones = 8;
}

message Zone {
    int32 zone_number = 1;
    string zone_name = 2;
    int32 capacity = 3;
    bool reserved = 4;
    double price = 5;
    repeated string exclusive = 6;
}

message LocationIdResponse {
    string id = 1;
}

// ------------------ CRUD Requests ------------------ //
message GetLocationRequest {
    string id = 1;
}

message ListLocationsRequest {}

message ListLocationsResponse {
    repeated Location locations = 1;
}

message UpdateLocationRequest {
    string id = 1;
    string venue_name = 2;
    string city = 3;
    string state_province = 4;
    string country = 5;
    double latitude = 6;
    double longitude = 7;
    repeated Zone zones = 8;  // optional, can update zones together
}

message DeleteLocationRequest {
    string id = 1;
}

message DeleteLocationResponse {
    bool success = 1;
}

// ------------------ Zone Requests ------------------ //
message AddZoneRequest {
    string location_id = 1;
    Zone zone = 2;
}

message RemoveZoneRequest {
    string location_id = 1;
    int32 zone_number = 2;
}

// ------------------ Service ------------------ //
service LocationService {
    // Location operations
    rpc CreateLocation (Location) returns (LocationIdResponse);
    rpc GetLocation (GetLocationRequest) returns (Location);
    rpc ListLocations (ListLocationsRequest) returns (ListLocationsResponse);
    rpc UpdateLocation (UpdateLocationRequest) returns (LocationIdResponse);
    rpc DeleteLocation (DeleteLocationRequest) returns (DeleteLocationResponse);

    // Zone operations
    rpc AddZone (AddZoneRequest) returns (LocationIdResponse);
    rpc RemoveZone (RemoveZoneRequest) returns (LocationIdResponse);
}
