// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: events.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
    id, name, description, location_id, artist, event_date, thumbnail, images
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id
`

type CreateEventParams struct {
	ID          pgtype.UUID        `json:"id"`
	Name        string             `json:"name"`
	Description pgtype.Text        `json:"description"`
	LocationID  pgtype.UUID        `json:"location_id"`
	Artist      []string           `json:"artist"`
	EventDate   pgtype.Timestamptz `json:"event_date"`
	Thumbnail   pgtype.Text        `json:"thumbnail"`
	Images      []string           `json:"images"`
}

// Insert a new event
func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.LocationID,
		arg.Artist,
		arg.EventDate,
		arg.Thumbnail,
		arg.Images,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteEvent = `-- name: DeleteEvent :one
UPDATE events
SET deleted_at = NOW()
WHERE id = $1
RETURNING $1
`

// Soft delete an event
func (q *Queries) DeleteEvent(ctx context.Context, id pgtype.UUID) (interface{}, error) {
	row := q.db.QueryRow(ctx, deleteEvent, id)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}

const getEventByID = `-- name: GetEventByID :one
SELECT id, created_at, updated_at, deleted_at, name, description, location_id, artist, event_date, thumbnail, images
FROM events
WHERE id = $1
  AND deleted_at IS NULL
`

// Get a single event by ID
func (q *Queries) GetEventByID(ctx context.Context, id pgtype.UUID) (Event, error) {
	row := q.db.QueryRow(ctx, getEventByID, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Description,
		&i.LocationID,
		&i.Artist,
		&i.EventDate,
		&i.Thumbnail,
		&i.Images,
	)
	return i, err
}

const hardDeleteEvent = `-- name: HardDeleteEvent :one
DELETE FROM events
WHERE id = $1
RETURNING $1
`

// Hard delete an event (for admin use)
func (q *Queries) HardDeleteEvent(ctx context.Context, id pgtype.UUID) (interface{}, error) {
	row := q.db.QueryRow(ctx, hardDeleteEvent, id)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}

const listEvents = `-- name: ListEvents :many
SELECT id, created_at, updated_at, deleted_at, name, description, location_id, artist, event_date, thumbnail, images
FROM events
WHERE deleted_at IS NULL
ORDER BY event_date DESC
`

// List all events
func (q *Queries) ListEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.Query(ctx, listEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
			&i.Description,
			&i.LocationID,
			&i.Artist,
			&i.EventDate,
			&i.Thumbnail,
			&i.Images,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events
SET
    name = $2,
    description = $3,
    location_id = $4,
    artist = $5,
    event_date = $6,
    thumbnail = $7,
    images = $8,
    updated_at = NOW()
WHERE id = $1
  AND deleted_at IS NULL
RETURNING id
`

type UpdateEventParams struct {
	ID          pgtype.UUID        `json:"id"`
	Name        string             `json:"name"`
	Description pgtype.Text        `json:"description"`
	LocationID  pgtype.UUID        `json:"location_id"`
	Artist      []string           `json:"artist"`
	EventDate   pgtype.Timestamptz `json:"event_date"`
	Thumbnail   pgtype.Text        `json:"thumbnail"`
	Images      []string           `json:"images"`
}

// Update an existing event
func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, updateEvent,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.LocationID,
		arg.Artist,
		arg.EventDate,
		arg.Thumbnail,
		arg.Images,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}
